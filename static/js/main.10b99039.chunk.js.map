{"version":3,"sources":["Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","handleFileUpload2","info","a","async","TempUniver","TempClientRestant","index2","finClientRestant","readXlsxFile","file","then","rows","console","log","forEach","row","push","code","nomDuClient","address","setState","univer","temp","state","Total","index","findIndex","elem","Seller","SellerToShow","Days","seller","Product","prod","produit","SelectedProduct","ListClient","length","client","clientUniver","ActiveCovergeRestant","options","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","filename","title","useTextFile","useBom","useKeysAsHeaders","ExportToCsv","generateCsv","handleFileUpload","Selsman","Products","TotalSells","visible","visible2","Set","newProd","product","qty","DaysToShow","tempProduct","TempTot","tempClient","Clients","Daily","day","k","conversion","NbrClient","ActiveCoverge","Day","temp1","DataToShow","sort","b","DispProd","downloadBtn","tempTotal","nnProduct","TotalDepot","callback","key","callback2","getClient","data","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","csvExporter","getActiveCoverge","getActiveCovergeDepot","visible3","ClientAchteur","Content","Layout","Header","Footer","Sider","Dragger","Upload","TabPane","Tabs","name","onChange","e","beforeUpload","accept","className","type","defaultActiveKey","this","map","i","tab","icon","size","onClick","disabled","columns","dataIndex","sorter","dataSource","onRow","record","onOk","onCancel","status","subTitle","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10b99039.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Upload, Icon, Layout, Tabs, Table, Button, Modal, Result } from \"antd\";\nimport readXlsxFile from \"read-excel-file\";\nimport { ExportToCsv } from \"export-to-csv\";\n\nimport \"antd/dist/antd.css\";\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Selsman: [],\n      Total: [],\n      DaysToShow: [],\n      DispProd: [],\n      SellerToShow: [],\n      DataToShow: [],\n      downloadBtn: true,\n      TotalDepot: [],\n      visible: false,\n      visible2: false,\n      visible3: false,\n      univer: [],\n      ActiveCovergeRestant: [],\n      ClientAchteur: [],\n      SelectedProduct: []\n    };\n  }\n  handleFileUpload2 = async info => {\n    let TempUniver = [];\n    let TempClientRestant = [];\n    let index2 = 0;\n    let finClientRestant = [];\n    readXlsxFile(info.file).then(rows => {\n      console.log(rows);\n      rows.forEach(row => {\n        if (row[1] !== \"Customer Code\" && row[1] !== null) {\n          TempUniver.push({\n            code: row[1],\n            nomDuClient: row[2],\n            address: row[10]\n          });\n        }\n      });\n      this.setState({ univer: TempUniver });\n\n      let temp = this.state.Total;\n      let index = temp.findIndex(\n        elem => elem.Seller === this.state.SellerToShow\n      );\n\n      temp[index].Days.forEach(seller => {\n        seller.Product.forEach(prod => {\n          index2 = seller.Product.findIndex(\n            elem => elem.produit === this.state.SelectedProduct\n          );\n        });\n        if (seller.Product[index2].ListClient.length > 0) {\n          TempClientRestant.push(seller.Product[index2].ListClient);\n        }\n      });\n      console.log(\"Calcule\");\n      TempClientRestant.forEach(client => {\n        TempUniver.forEach(clientUniver => {\n          let index = client.findIndex(\n            elem => elem.nomDuClient === clientUniver.nomDuClient\n          );\n\n          if (index == -1) {\n            finClientRestant.push(clientUniver);\n          }\n        });\n        console.log(finClientRestant);\n        this.setState({ ActiveCovergeRestant: finClientRestant });\n      });\n\n      const options = {\n        fieldSeparator: \",\",\n        quoteStrings: '\"',\n        decimalSeparator: \".\",\n        showLabels: true,\n        showTitle: true,\n        filename: this.state.SellerToShow + \"///\" + this.state.SelectedProduct,\n        title: this.state.SelectedProduct,\n        useTextFile: false,\n        useBom: true,\n        useKeysAsHeaders: true\n        // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n      };\n      const csvExporter = new ExportToCsv(options);\n\n      csvExporter.generateCsv(this.state.ActiveCovergeRestant);\n    });\n  };\n  handleFileUpload = async info => {\n    let Selsman = [];\n    let Products = [];\n    let TotalSells = [];\n    let tempProduct = [];\n    this.setState({ visible: true });\n    let Days = [];\n    readXlsxFile(info.file).then(rows => {\n      if (rows[0][0] !== \"Document Listing\") {\n        this.setState({ visible2: true });\n      }\n      rows.forEach(row => {\n        if (row[10] !== null && row[10] !== \"* Salesman\") {\n          Selsman.push(row[10]);\n        }\n      });\n      Selsman = [...new Set(Selsman)];\n      this.setState({ Selsman: Selsman });\n      rows.forEach(row => {\n        if (row[8] !== null && row[8] !== \"Product Description\") {\n          Products.push(row[8]);\n        }\n      });\n      let newProd = [];\n\n      Products = [...new Set(Products)];\n      Products.forEach(product => {\n        newProd.push({ product: product, qty: 0 });\n      });\n\n      rows.forEach(row => {\n        if (row[9] !== null && row[9] !== \"Transaction Date\") {\n          Days.push(row[9]);\n        }\n      });\n      Days = [...new Set(Days)];\n      this.setState({ DaysToShow: Days });\n\n      Selsman.forEach(seller => {\n        TotalSells.push({\n          seller: seller,\n          product: newProd\n        });\n      });\n\n      /**   rows.forEach(row => {\n        TotalSells.forEach(data => {\n          if (data.seller === row[10]) {\n            data.product.forEach(produit => {\n              let k = 0;\n              if (produit.product === row[8] && data.seller === row[10]) {\n                let qty = row[25];\n                let conversion = row[18];\n                k = k + qty / conversion;\n                produit.qty = k;\n              }\n            });\n          }\n        });\n      });\n      */\n      let tempProduct = [];\n      let TempTot = [];\n      let tempClient = [];\n      let Clients = [];\n      let Daily = [];\n      Selsman.forEach(seller => {\n        Days.forEach(day => {\n          Products.forEach(product => {\n            let k = 0;\n            rows.forEach(row => {\n              if (row[8] === product && row[10] === seller && row[9] === day) {\n                let qty = row[25];\n                let conversion = row[18];\n                if (row[26] === \"EA\" || row[26] === \"DS\") {\n                  k = k + qty / conversion;\n                } else {\n                  k = k + (qty / conversion) * conversion;\n                }\n\n                tempClient.push(row[1]);\n                Clients.push({ code: row[1], nomDuClient: row[2] });\n              }\n            });\n            tempClient = [...new Set(tempClient)];\n            Clients = [...new Set(Clients)];\n            let NbrClient = tempClient.length;\n            tempClient = [];\n            tempProduct.push({\n              produit: product,\n              qty: k,\n              ActiveCoverge: NbrClient,\n              ListClient: Clients\n            });\n            Clients = [];\n          });\n          Daily.push({ Day: day, Product: tempProduct });\n\n          tempProduct = [];\n        });\n        TempTot.push({\n          Seller: seller,\n          Days: Daily\n        });\n        Daily = [];\n      });\n\n      this.setState({ Total: TempTot });\n      let temp1 = this.state.Total[0].Seller;\n      this.setState({ SellerToShow: temp1 });\n      Days = this.state.Total[0].Days;\n      this.setState({ DataToShow: Days });\n      let temp = this.state.DataToShow;\n      let prod = temp[0].Product;\n      prod.sort(function(a, b) {\n        if (a.produit < b.produit) {\n          return -1;\n        }\n        if (a.produit > b.produit) {\n          return 1;\n        }\n        return 0;\n      });\n      this.setState({ DispProd: prod, downloadBtn: false });\n\n      let tempTotal = this.state.Total;\n      let nnProduct = [];\n      Products.forEach(product => {\n        nnProduct.push({ Product: product, qty: 0, ActiveCoverge: 0 });\n      });\n      let tempTotalDepot = [];\n\n      tempTotal.forEach(seller => {\n        seller.Days.forEach(day => {\n          day.Product.forEach(prod => {\n            let index = nnProduct.findIndex(\n              elem => elem.Product === prod.produit\n            );\n\n            nnProduct[index].qty += prod.qty;\n            nnProduct[index].ActiveCoverge += prod.ActiveCoverge;\n          });\n        });\n      });\n      this.setState({ TotalDepot: nnProduct });\n      this.setState({ visible: false });\n    });\n  };\n  callback = key => {\n    let temp = this.state.Total;\n    let index = temp.findIndex(elem => elem.Seller === key);\n    let seller = temp[index].Seller;\n    this.setState({ SellerToShow: seller });\n    let Days = this.state.Total[index].Days;\n    this.setState({ DataToShow: Days });\n  };\n\n  callback2 = key => {\n    let temp = this.state.DataToShow;\n    let index = temp.findIndex(elem => elem.Day === key);\n\n    let prod = temp[index].Product;\n    prod.sort(function(a, b) {\n      if (a.produit < b.produit) {\n        return -1;\n      }\n      if (a.produit > b.produit) {\n        return 1;\n      }\n      return 0;\n    });\n    this.setState({ DispProd: prod, downloadBtn: false });\n  };\n  getClient = data => {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, \"0\");\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    var yyyy = today.getFullYear();\n\n    today = mm + \"/\" + dd + \"/\" + yyyy;\n\n    const options = {\n      fieldSeparator: \",\",\n      quoteStrings: '\"',\n      decimalSeparator: \".\",\n      showLabels: true,\n      showTitle: true,\n      filename: data.produit + \"_\" + this.state.SellerToShow,\n      title: data.produit + \"/ \" + today,\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true\n      // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n    };\n    const csvExporter = new ExportToCsv(options);\n    this.setState({ SelectedProduct: data.produit });\n    csvExporter.generateCsv(data.ListClient);\n  };\n  getActiveCoverge = () => {\n    const options = {\n      fieldSeparator: \",\",\n      quoteStrings: '\"',\n      decimalSeparator: \".\",\n      showLabels: true,\n      showTitle: true,\n      filename: this.state.SellerToShow,\n      title: this.state.SellerToShow,\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true\n      // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n    };\n    const csvExporter = new ExportToCsv(options);\n\n    csvExporter.generateCsv(this.state.DispProd);\n  };\n  getActiveCovergeDepot = () => {\n    const options = {\n      fieldSeparator: \",\",\n      quoteStrings: '\"',\n      decimalSeparator: \".\",\n      showLabels: true,\n      showTitle: true,\n      filename: \"Active Coverge Depot\",\n      title: \"Active Coverge Depot\",\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true\n      // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n    };\n    const csvExporter = new ExportToCsv(options);\n\n    csvExporter.generateCsv(this.state.TotalDepot);\n  };\n  render() {\n    const { Header, Footer, Sider, Content } = Layout;\n\n    const { Dragger } = Upload;\n    const { TabPane } = Tabs;\n    const columns = [\n      {\n        title: \"Product\",\n        dataIndex: \"produit\",\n        sorter: true,\n        key: \"produit\"\n      },\n      {\n        title: \"Quantity\",\n        dataIndex: \"qty\",\n        key: \"qty\"\n      },\n      {\n        title: \"Active Coverge\",\n        dataIndex: \"ActiveCoverge\",\n        key: \"ActiveCoverge\"\n      }\n    ];\n\n    return (\n      <>\n        <Layout>\n          <Content>\n            <Dragger\n              name=\"file\"\n              onChange={e => {\n                this.handleFileUpload(e);\n              }}\n              beforeUpload={() => {\n                return false;\n              }}\n              accept=\".xlsx\"\n            >\n              <p className=\"ant-upload-drag-icon\">\n                <Icon type=\"inbox\" />\n              </p>\n              <p className=\"ant-upload-text\">\n                Appuier ici ou deplacer le fichier ici\n              </p>\n              <p className=\"ant-upload-hint\"></p>\n            </Dragger>\n          </Content>\n          <Tabs defaultActiveKey=\"1\" onChange={this.callback}>\n            {this.state.Selsman.map(i => (\n              <TabPane tab={i} key={i}></TabPane>\n            ))}\n          </Tabs>\n          <Tabs defaultActiveKey=\"1\" onChange={this.callback2}>\n            {this.state.DaysToShow.map(i => (\n              <TabPane tab={i} key={i}></TabPane>\n            ))}\n          </Tabs>\n          <Layout>\n            <Content>\n              <Button\n                type=\"primary\"\n                icon=\"download\"\n                size=\"large\"\n                onClick={this.getActiveCoverge}\n                disabled={this.state.downloadBtn}\n              >\n                Telecharger l'active coverge\n              </Button>\n              <Button\n                type=\"primary\"\n                icon=\"download\"\n                size=\"large\"\n                onClick={this.getActiveCovergeDepot}\n                disabled={this.state.downloadBtn}\n              >\n                Telecharger l'active coverge depot\n              </Button>\n            </Content>\n          </Layout>\n          <Table\n            columns={columns}\n            dataSource={this.state.DispProd}\n            onRow={record => ({\n              onClick: () => {\n                this.getClient(record);\n                this.setState({ visible3: true });\n              }\n            })}\n          />\n          <Modal title=\"En cours de Traitement\" visible={this.state.visible}>\n            <Result title=\"Le fichier est en cours d'execution Veuillez patienter\" />\n          </Modal>\n          <Modal\n            title=\"En cours de Traitement\"\n            visible={this.state.visible2}\n            onOk={() => {\n              this.setState({ visible2: false });\n            }}\n            onCancel={() => {\n              this.setState({ visible2: false });\n            }}\n          >\n            <Result\n              status=\"error\"\n              title=\"Fichier invalide\"\n              subTitle=\"Veuillez ne pas modifier le fichier Document Listing il suffis seulement de autoriser les modification apres le telechargement veuillez contacter Mr Sofiane Khoudour \"\n            ></Result>\n          </Modal>\n          <Modal\n            title=\"En cours de Traitement\"\n            visible={this.state.visible3}\n            onOk={() => {\n              this.setState({ visible3: false });\n            }}\n            onCancel={() => {\n              this.setState({ visible3: false });\n            }}\n          >\n            <Upload\n              name=\"file2\"\n              onChange={e => {\n                this.handleFileUpload2(e);\n              }}\n              beforeUpload={() => {\n                return false;\n              }}\n              accept=\".xlsx\"\n            >\n              <Button>\n                <Icon type=\"upload\" /> Selection l'univere du vendeur\n              </Button>\n            </Upload>\n            ,\n          </Modal>\n        </Layout>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./Components/Main\";\nfunction App() {\n  return <Main></Main>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}